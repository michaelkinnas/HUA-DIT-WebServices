[
    {
        "id": "3d9c4b8676673364",
        "type": "tab",
        "label": "Get data from API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f04f43533f741c82",
        "type": "tab",
        "label": "DB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d9af16830f8ace2c",
        "type": "tab",
        "label": "K-Clusters",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3a610e6787b75aeb",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "39a5a9876bc94f25",
        "type": "sqlitedb",
        "db": "/home/mike/HUA/WebServices/HUA-DIT-WebServices/attica_traffic.sqlite",
        "mode": "RWC"
    },
    {
        "id": "75713334e8d9d783",
        "type": "ui_tab",
        "name": "Main",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d74ed80f31a2ffe3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "578d025e00dafb5b",
        "type": "ui_group",
        "name": "Select Road",
        "tab": "75713334e8d9d783",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "98d6e69f573d7d61",
        "type": "http request",
        "z": "3d9c4b8676673364",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://data.gov.gr/api/v1/query/road_traffic_attica?date_from={{{date_from}}}&date_to={{{date_to}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Token 18b95bf584abece33b62fba77e946f5d19760873"
            }
        ],
        "x": 630,
        "y": 60,
        "wires": [
            [
                "02b98a40aa4d3f7b"
            ]
        ]
    },
    {
        "id": "ae99c0a11089472a",
        "type": "function",
        "z": "3d9c4b8676673364",
        "name": "set query date parameters",
        "func": "msg.payload = {}\nmsg[\"date_from\"] = \"2023-01-01\"\nmsg[\"date_to\"] = \"2023-03-31\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "98d6e69f573d7d61"
            ]
        ]
    },
    {
        "id": "b533a47bb7919317",
        "type": "inject",
        "z": "3d9c4b8676673364",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "ae99c0a11089472a"
            ]
        ]
    },
    {
        "id": "02b98a40aa4d3f7b",
        "type": "json",
        "z": "3d9c4b8676673364",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 110,
        "y": 140,
        "wires": [
            [
                "4fed006d0cb12aed"
            ]
        ]
    },
    {
        "id": "eebc06999e92089c",
        "type": "link out",
        "z": "3d9c4b8676673364",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "0cb85856e7bf9f24"
        ],
        "x": 695,
        "y": 140,
        "wires": []
    },
    {
        "id": "4fed006d0cb12aed",
        "type": "function",
        "z": "3d9c4b8676673364",
        "name": "Batch insert traffic data into DB (SqLite)",
        "func": "// const query_template\nlet insert_query = \"INSERT INTO traffic(device_id, app_process_time, counted_cars, average_speed) VALUES \"\n\nfor (let item of msg.payload) {\n    insert_query += `(\"${item.deviceid}\", \"${item.appprocesstime}\", \"${item.countedcars}\", \"${item.average_speed}\"),`   \n}\n\n// insert_query += ')'\nmsg.topic = insert_query.slice(0, -1)\n// msg.topic += ' on duplicate key update device_id=device_id'\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "eebc06999e92089c"
            ]
        ]
    },
    {
        "id": "01855f53407f2fe6",
        "type": "comment",
        "z": "3d9c4b8676673364",
        "name": "",
        "info": "INSERT INTO traffic(deviceid, name, time) VALUES ({deviceid}....)\nINSERT INTO traffic(deviceid, name, time) VALUES ({deviceid}....)\nINSERT INTO traffic(deviceid, name, time) VALUES ({deviceid}....)\nINSERT INTO traffic(deviceid, name, time) VALUES ({deviceid}....)\nINSERT INTO traffic(deviceid, name, time) VALUES ({deviceid}....)\n\nhow to batch insert into db\n\n\n\n\nINSERT INTO traffic(deviceid, name, time) VALUES ({deviceid},{name},{time}),({deviceid},{name},{time}),({deviceid},{name},{time})",
        "x": 560,
        "y": 340,
        "wires": []
    },
    {
        "id": "b15e039dbb381e4c",
        "type": "sqlite",
        "z": "f04f43533f741c82",
        "mydb": "39a5a9876bc94f25",
        "sqlquery": "batch",
        "sql": "",
        "name": "DB",
        "x": 390,
        "y": 140,
        "wires": [
            [
                "567611ad4eedcd43",
                "7e5755ea301b997a"
            ]
        ]
    },
    {
        "id": "567611ad4eedcd43",
        "type": "debug",
        "z": "f04f43533f741c82",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 140,
        "wires": []
    },
    {
        "id": "354fbc127d1d58ca",
        "type": "inject",
        "z": "f04f43533f741c82",
        "name": "Create traffic table",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE traffic(device_id TEXT, app_process_time TEXT, counted_cars INTEGER, average_speed REAL, PRIMARY KEY(device_id, app_process_time) ON CONFLICT IGNORE, FOREIGN KEY(device_id) REFERENCES sensors(device_id) ON DELETE CASCADE)",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "b15e039dbb381e4c"
            ]
        ]
    },
    {
        "id": "9744469082665cdf",
        "type": "inject",
        "z": "f04f43533f741c82",
        "name": "Create sensors table",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE sensors(sensor_id TEXT PRIMARY KEY, road_name TEXT, road_info TEXT)",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "b15e039dbb381e4c"
            ]
        ]
    },
    {
        "id": "f5b57f80c8eef1ca",
        "type": "inject",
        "z": "f04f43533f741c82",
        "name": "Drop table traffic",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "DROP TABLE traffic",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "b15e039dbb381e4c"
            ]
        ]
    },
    {
        "id": "8f330a581dc2fa70",
        "type": "inject",
        "z": "f04f43533f741c82",
        "d": true,
        "name": "Select sensor ids from Λ.ΚΗΦΙΣΟΥ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT sensor_id FROM sensors WHERE road_name = \"Λ. ΚΗΦΙΣΟΥ\"",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 40,
        "wires": [
            [
                "b15e039dbb381e4c"
            ]
        ]
    },
    {
        "id": "0cb85856e7bf9f24",
        "type": "link in",
        "z": "f04f43533f741c82",
        "name": "DB Interface",
        "links": [
            "60a4b7b6ef8acb62",
            "eebc06999e92089c"
        ],
        "x": 215,
        "y": 100,
        "wires": [
            [
                "b15e039dbb381e4c"
            ]
        ]
    },
    {
        "id": "7e5755ea301b997a",
        "type": "link out",
        "z": "f04f43533f741c82",
        "name": "link out 5",
        "mode": "return",
        "links": [],
        "x": 525,
        "y": 100,
        "wires": []
    },
    {
        "id": "55548fc40a903403",
        "type": "function",
        "z": "d9af16830f8ace2c",
        "name": "K-Clustering",
        "func": "var clusterMaker = global.get('clusters')\n//number of clusters, defaults to undefined\nclusterMaker.k(3);\n\n//default to 1000\nclusterMaker.iterations(750);\n\nclusterMaker.data(msg.dataset)\n// msg.payload['clusters'] = clusterMaker.clusters()\nmsg.clusters = clusterMaker.clusters()\n\ndelete msg.dataset\ndelete msg.topic\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 80,
        "wires": [
            [
                "542ba9a40b5504e8",
                "84f5c8a9aab7a96e"
            ]
        ]
    },
    {
        "id": "542ba9a40b5504e8",
        "type": "debug",
        "z": "d9af16830f8ace2c",
        "name": "debug 22",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 20,
        "wires": []
    },
    {
        "id": "1b85d160a557c69e",
        "type": "function",
        "z": "d9af16830f8ace2c",
        "name": "Build data set",
        "func": "let speeds = []\nfor (let item of msg.payload) {\n    speeds.push([item.average_speed])\n}\n\nmsg.dataset = speeds\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 80,
        "wires": [
            [
                "55548fc40a903403"
            ]
        ]
    },
    {
        "id": "6ee78aa888ad31f4",
        "type": "inject",
        "z": "d9af16830f8ace2c",
        "name": "ΔΕΔΟΜΕΝΑ Λ.ΚΗΦΙΣΟΥ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM traffic JOIN sensors ON traffic.device_id = sensors.sensor_id WHERE sensors.road_name = 'Λ. ΚΗΦΙΣΟΥ'",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "e445e64fdb7335be"
            ]
        ]
    },
    {
        "id": "e445e64fdb7335be",
        "type": "link call",
        "z": "d9af16830f8ace2c",
        "name": "",
        "links": [
            "0cb85856e7bf9f24"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 430,
        "y": 80,
        "wires": [
            [
                "1b85d160a557c69e"
            ]
        ]
    },
    {
        "id": "84f5c8a9aab7a96e",
        "type": "function",
        "z": "d9af16830f8ace2c",
        "name": "Find centroid brackets",
        "func": "for (let item of msg.clusters) {\n    let array = []\n    for (let number of item.points) {\n        array.push(number[0])\n    }\n\n    let bracket = {\n        'high': 0,\n        'low': 0\n    }\n\n    bracket.high = Math.max.apply(null, array)\n    bracket.low = Math.min.apply(null, array)\n    item.bracket = bracket\n}\n\n//cleanup cluster points if not needed, comment out if needed\n// for (let cluster of msg.clusters) {\n//     delete cluster.points\n// }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 160,
        "wires": [
            [
                "ee577c7b2d2f4798",
                "0f41f297bc3cd867"
            ]
        ]
    },
    {
        "id": "ee577c7b2d2f4798",
        "type": "debug",
        "z": "d9af16830f8ace2c",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 260,
        "wires": []
    },
    {
        "id": "0f41f297bc3cd867",
        "type": "function",
        "z": "d9af16830f8ace2c",
        "name": "Classify traffic into brackets",
        "func": "let counted_cars = []\n\n//count cars for each centroid bracket\nlet total = 0\nfor (let cluster of msg.clusters) {   \n    let count = 0        \n    for (let record of msg.payload) {\n        if (record.average_speed >= cluster.bracket.low && record.average_speed <= cluster.bracket.high){            \n            count += record.counted_cars            \n        }\n    }   \n    counted_cars.push({\n        centroid: cluster.centroid[0],\n        counted_cars: count,\n        ratio: 0\n    })\n    total += count\n}\n\nmsg.counted_cars = counted_cars\n\n//calculate rations for each centroid bracket\nfor (let item of msg.counted_cars) {\n    item.ratio = item.counted_cars / total\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 160,
        "wires": [
            [
                "089c6d952e6a566e"
            ]
        ]
    },
    {
        "id": "089c6d952e6a566e",
        "type": "debug",
        "z": "d9af16830f8ace2c",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 260,
        "wires": []
    },
    {
        "id": "faebc7c0593e53c6",
        "type": "inject",
        "z": "3a610e6787b75aeb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "fb9c62c4221ae1f8"
            ]
        ]
    },
    {
        "id": "ab987c8d46297707",
        "type": "ui_dropdown",
        "z": "3a610e6787b75aeb",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "578d025e00dafb5b",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 980,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "fb9c62c4221ae1f8",
        "type": "link call",
        "z": "3a610e6787b75aeb",
        "d": true,
        "name": "",
        "links": [
            "0cb85856e7bf9f24"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 570,
        "y": 80,
        "wires": [
            [
                "a38c62b72745c652"
            ]
        ]
    },
    {
        "id": "a38c62b72745c652",
        "type": "function",
        "z": "3a610e6787b75aeb",
        "name": "Build roads list",
        "func": "\n\n\n\nmsg.options = ['epilogi1','epilogi2']\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 80,
        "wires": [
            [
                "ab987c8d46297707",
                "a1dddbf4fbbb4d49"
            ]
        ]
    },
    {
        "id": "4479012e810e49fa",
        "type": "inject",
        "z": "3a610e6787b75aeb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 220,
        "wires": [
            [
                "a38c62b72745c652"
            ]
        ]
    },
    {
        "id": "a1dddbf4fbbb4d49",
        "type": "debug",
        "z": "3a610e6787b75aeb",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 200,
        "wires": []
    }
]