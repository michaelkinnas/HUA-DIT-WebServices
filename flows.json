[
    {
        "id": "f04f43533f741c82",
        "type": "tab",
        "label": "DB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3d9c4b8676673364",
        "type": "tab",
        "label": "gov.gr API",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "019efafd3890369d",
        "type": "tab",
        "label": "Monthly K-Clusters",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "469d36c343ae88fa",
        "type": "tab",
        "label": "Hourly K-Clusters",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "53617fb819fb8d69",
        "type": "tab",
        "label": "Daily update",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e0bd9e50950cbdbf",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "70cdc46223053fea",
        "type": "tab",
        "label": "Rabbit MQ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ed6fe690bd97f00",
        "type": "subflow",
        "name": "JSON array sort",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "3ce77276c998505a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 120,
                "wires": [
                    {
                        "id": "4285fc65f666f0f8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d74ed80f31a2ffe3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "5588be0b796aa416",
        "type": "sqlitedb",
        "db": "/home/mike/HUA/WebServices/HUA-DIT-WebServices/db2.sqlite",
        "mode": "RWC"
    },
    {
        "id": "75713334e8d9d783",
        "type": "ui_tab",
        "name": "Ιστορικά Δεδομένα",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "578d025e00dafb5b",
        "type": "ui_group",
        "name": "Μηνιαία μετατόπιση",
        "tab": "75713334e8d9d783",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "281da459e7f9dd42",
        "type": "ui_spacer",
        "z": "e0bd9e50950cbdbf",
        "name": "spacer",
        "group": "578d025e00dafb5b",
        "order": 2,
        "width": 11,
        "height": 1
    },
    {
        "id": "6be636b1c47e4056",
        "type": "ui_tab",
        "name": "Ημερήσια Ανάλυση",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6207fff339b851ea",
        "type": "ui_group",
        "name": "Σύγκριση με k-clusters περιόδου 01-01-2023 - 30-04-2023",
        "tab": "6be636b1c47e4056",
        "order": 1,
        "disp": true,
        "width": "26",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ee71958aedbdf465",
        "type": "ui_spacer",
        "z": "e0bd9e50950cbdbf",
        "name": "spacer",
        "group": "6207fff339b851ea",
        "order": 1,
        "width": 8,
        "height": 1
    },
    {
        "id": "61ef9368cd10da85",
        "type": "ui_spacer",
        "z": "e0bd9e50950cbdbf",
        "name": "spacer",
        "group": "6207fff339b851ea",
        "order": 3,
        "width": 8,
        "height": 1
    },
    {
        "id": "82cfb6e6ec87f54c",
        "type": "amqp-broker",
        "name": "Consumer",
        "host": "localhost",
        "port": "5672",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "6843372537ab3896",
        "type": "amqp-broker",
        "name": "hourly traffic report",
        "host": "localhost",
        "port": "5672",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "3ce77276c998505a",
        "type": "function",
        "z": "6ed6fe690bd97f00",
        "name": "prechecks",
        "func": "function getNestedValue(object, path) {\n    if (!path) return undefined;\n\n    let prop, props = path.split('.');\n\n    for (var i = 0, iLen = props.length - 1; i < iLen; i++) {\n        prop = props[i];\n        let candidate = object[prop];\n        if (candidate !== undefined) {\n            object = candidate;\n        } else {\n            break;\n        }\n    }\n    return object[props[i]];\n}\n\n\nif (!msg.payload.value.props) {\n    throw new Error('\"props\" property does not exist');\n}\nif (!Array.isArray(msg.payload.value.props)) {\n    throw new Error('\"props\" property is not an array');\n}\n\nif (msg.payload.value.props.length > 2 || msg.payload.value.props.length < 1) {\n    throw new Error('\"props\" array must be of size 1 or 2');\n}\n\nfor (let item of msg.payload.value.props) {\n    if (typeof(item) !== 'string') {\n        throw new Error('\"props\" value at index ' + msg.payload.value.props.indexOf(item) + ', is not of type string');\n    }\n}\n\nif (!msg.payload.value.data) {\n    throw new Error('Missing \"data\" property');\n}\n\n\nfor (let param of msg.payload.value.props) {\n    for (let item of msg.payload.value.data){\n        if (getNestedValue(item, param) === undefined){ \n            throw new Error('Provided \"props\" property missing from object');\n        }\n    }\n}\n\nif (msg.payload.value.order) {\n    for (let item of msg.payload.value.order) {\n       if (!(item === 'asc' || item === 'dsc')) {\n           throw new Error('\"order\" parameters error');\n       }\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 40,
        "wires": [
            [
                "5d81f3693079d564"
            ]
        ]
    },
    {
        "id": "067376b1218309c9",
        "type": "switch",
        "z": "6ed6fe690bd97f00",
        "name": "",
        "property": "payload.props.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 80,
        "wires": [
            [
                "1da7fee8b1ae18f7"
            ],
            [
                "4285fc65f666f0f8"
            ]
        ]
    },
    {
        "id": "5d81f3693079d564",
        "type": "function",
        "z": "6ed6fe690bd97f00",
        "name": "primary sort",
        "func": "function getNestedValue(object, path) {\n    if (!path) return undefined;\n\n    let prop, props = path.split('.');\n    \n    for (var i = 0, iLen = props.length - 1; i < iLen; i++) {\n        prop = props[i];\n        let candidate = object[prop];\n        if (candidate !== undefined) {\n            object = candidate;\n        } else {\n            break;\n        }\n    }\n    return object[props[i]];\n}\n\nconst props = msg.payload.value.props\nconst order = msg.payload.value.order\nlet data = msg.payload.value.data\n\nif (!order || order && order[0] === 'asc') {\n    data.sort((a, b) => {\n        return ('' + getNestedValue(a, props[0])).localeCompare(getNestedValue(b, props[0]))\n    })\n} else if (order[0] === 'dsc') {\n    data.sort((a, b) => {\n        return ('' + getNestedValue(b, props[0])).localeCompare(getNestedValue(a, props[0]))\n    })\n}\n\nmsg.payload = {\n    'props': props,\n    'order': order,\n    'data': data\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 120,
        "wires": [
            [
                "067376b1218309c9"
            ]
        ]
    },
    {
        "id": "1da7fee8b1ae18f7",
        "type": "function",
        "z": "6ed6fe690bd97f00",
        "name": "secondary sort",
        "func": "function getNestedValue(object, path) {\n    if (!path) return undefined;\n\n    let prop, props = path.split('.');\n\n    for (var i = 0, iLen = props.length - 1; i < iLen; i++) {\n        prop = props[i];\n\n        let candidate = object[prop];\n        if (candidate !== undefined) {\n            object = candidate;\n        } else {\n            break;\n        }\n    }\n    return object[props[i]];\n}\n\nconst props = msg.payload.props\nconst order = msg.payload.order\nconst data = msg.payload.data\n\n//group according to primary property\nlet groups = []\nlet group = []\nlet primary_prop = props[0]\nfor (let item of data) {\n    if (item[props[0]] === primary_prop) {  \n        group.push(item)\n    } else {\n        groups.push(group)\n        group = []\n        group.push(item)\n        primary_prop = item[props[0]]\n    }\n}\ngroups.push(group)\n\n//sort each group\nfor (let group of groups) {\n    //ascending\n    if (!order || order && order[1] === 'asc') {\n        group.sort((a, b) => {\n            return ('' + getNestedValue(a, props[1])).localeCompare(getNestedValue(b, props[1]))\n        })\n    //descending\n    } else if (order[1] === 'dsc') {\n        group.sort((a, b) => {\n            return ('' + getNestedValue(b, props[1])).localeCompare(getNestedValue(a, props[1]))\n        })\n    }\n\n}\n\n//recombine data\nlet sorted_data = []\nfor (let group of groups) {\n    for (let item of group) {\n        sorted_data.push(item)\n    }\n}\n\nmsg.payload = {\n    // 'props': props,\n    // 'order': order,\n    'data': sorted_data\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 40,
        "wires": [
            [
                "4285fc65f666f0f8"
            ]
        ]
    },
    {
        "id": "4285fc65f666f0f8",
        "type": "function",
        "z": "6ed6fe690bd97f00",
        "name": "format payload",
        "func": "const data = msg.payload.data\nmsg.payload = { data } //openwhisk\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "6543c3f2ca12350d",
        "type": "sqlite",
        "z": "f04f43533f741c82",
        "mydb": "5588be0b796aa416",
        "sqlquery": "batch",
        "sql": "",
        "name": "DB Batch insert",
        "x": 460,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f8482dd0d3eb5861",
        "type": "link in",
        "z": "f04f43533f741c82",
        "name": "DB2 batch insert",
        "links": [
            "4afb4726da95e57b",
            "527efbcb58ecf430"
        ],
        "x": 285,
        "y": 40,
        "wires": [
            [
                "6543c3f2ca12350d"
            ]
        ]
    },
    {
        "id": "2bbf3a20ae89c520",
        "type": "inject",
        "z": "f04f43533f741c82",
        "name": "create monthly clusters table",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE \"monthly_clusters\" ( \"id\" INTEGER, \"month\" TEXT, \"day\" TEXT, \"road\" TEXT, \"centroid1\" REAL,  \"centroid2\" REAL, PRIMARY KEY(\"id\"));",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "6543c3f2ca12350d"
            ]
        ]
    },
    {
        "id": "7e2726054319fa12",
        "type": "inject",
        "z": "f04f43533f741c82",
        "name": "create hourly clusters table",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "CREATE TABLE \"hourly_clusters\" ( \"id\"\tINTEGER, \"hour\" TEXT, \"road\" TEXT, \"centroid1\" REAL, \"centroid2\" REAL, PRIMARY KEY(\"id\") );",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "6543c3f2ca12350d"
            ]
        ]
    },
    {
        "id": "45095633224fe68b",
        "type": "sqlite",
        "z": "f04f43533f741c82",
        "mydb": "5588be0b796aa416",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "DB",
        "x": 350,
        "y": 280,
        "wires": [
            [
                "2b1bf0baafe6bfbc"
            ]
        ]
    },
    {
        "id": "4c0b0e95abe41adb",
        "type": "link in",
        "z": "f04f43533f741c82",
        "name": "DB interface",
        "links": [],
        "x": 185,
        "y": 280,
        "wires": [
            [
                "45095633224fe68b"
            ]
        ]
    },
    {
        "id": "2b1bf0baafe6bfbc",
        "type": "link out",
        "z": "f04f43533f741c82",
        "name": "link out 9",
        "mode": "return",
        "links": [],
        "x": 525,
        "y": 280,
        "wires": []
    },
    {
        "id": "98d6e69f573d7d61",
        "type": "http request",
        "z": "3d9c4b8676673364",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://data.gov.gr/api/v1/query/road_traffic_attica?date_from={{{date_from}}}&date_to={{{date_to}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "other",
                "valueValue": "Token 18b95bf584abece33b62fba77e946f5d19760873"
            }
        ],
        "x": 230,
        "y": 60,
        "wires": [
            [
                "52067ff2382e812f",
                "cbfcd413682c56e2"
            ]
        ]
    },
    {
        "id": "b533a47bb7919317",
        "type": "inject",
        "z": "3d9c4b8676673364",
        "name": "Test API",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2023-6-1",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2023-6-2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "98d6e69f573d7d61"
            ]
        ]
    },
    {
        "id": "fc0ac11ee099dff3",
        "type": "link in",
        "z": "3d9c4b8676673364",
        "name": "API call",
        "links": [],
        "x": 75,
        "y": 60,
        "wires": [
            [
                "98d6e69f573d7d61"
            ]
        ]
    },
    {
        "id": "52067ff2382e812f",
        "type": "link out",
        "z": "3d9c4b8676673364",
        "name": "API Return",
        "mode": "return",
        "links": [],
        "x": 385,
        "y": 60,
        "wires": []
    },
    {
        "id": "cbfcd413682c56e2",
        "type": "debug",
        "z": "3d9c4b8676673364",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 140,
        "wires": []
    },
    {
        "id": "15e3990eb3aaf792",
        "type": "inject",
        "z": "3d9c4b8676673364",
        "name": "Test API",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2023-05-30",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2023-05-31",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "98d6e69f573d7d61"
            ]
        ]
    },
    {
        "id": "52520011d05866bd",
        "type": "link call",
        "z": "019efafd3890369d",
        "name": "",
        "links": [
            "fc0ac11ee099dff3"
        ],
        "linkType": "static",
        "timeout": "300",
        "x": 280,
        "y": 280,
        "wires": [
            [
                "b3e0b9db3a177a7e"
            ]
        ]
    },
    {
        "id": "cee2f7b1bbc03e41",
        "type": "function",
        "z": "019efafd3890369d",
        "name": "k-clustering",
        "func": "var clusterMaker = global.get('clusters')\n//number of clusters, defaults to undefined\nclusterMaker.k(2);\n\n//default to 1000\nclusterMaker.iterations(300);\n\nlet clusters = []\n\nfor (let road of msg.dataset) {\n    for (let month of road.months) {\n        for (let day of month.days) {\n            clusterMaker.data(day.speeds)\n            day.clusters = clusterMaker.clusters()\n        }\n    }    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 400,
        "wires": [
            [
                "c61a13d82f2bad85"
            ]
        ]
    },
    {
        "id": "c61a13d82f2bad85",
        "type": "function",
        "z": "019efafd3890369d",
        "name": "built SQL insert",
        "func": "let insert_query = \"INSERT INTO monthly_clusters(month, day, road, centroid1, centroid2) VALUES \"\nfor (let road of msg.dataset) {\n    for (let month of road.months) {\n        for (let day of month.days) {\n            let max = day.clusters[0].centroid[0]\n            let min = day.clusters[1].centroid[0]\n            if (min > max) {\n                [max, min] = [min, max]\n            }\n            insert_query += `(\"${month.month}\", \"${day.day}\", \"${road.road_name}\", \"${max}\", \"${min}\"),`\n        }\n    }\n}\nmsg = {}\nmsg.topic = insert_query.slice(0, -1)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "527efbcb58ecf430"
            ]
        ]
    },
    {
        "id": "527efbcb58ecf430",
        "type": "link out",
        "z": "019efafd3890369d",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "f8482dd0d3eb5861"
        ],
        "x": 475,
        "y": 460,
        "wires": []
    },
    {
        "id": "b3e0b9db3a177a7e",
        "type": "function",
        "z": "019efafd3890369d",
        "name": "format dataset",
        "func": "const days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']\n\nlet roads = []\n\nfor (let item of msg.payload) { \n    const birthday = new Date(item.appprocesstime.substring(0, 10))\n    const day_name = days[birthday.getDay()]\n\n    let index_road = roads.findIndex(x => x.road_name === item.road_name);   \n    \n    if (index_road === -1) {\n        //create new road\n        roads.push({\n            'road_name' : item.road_name,\n            'months': [{\n                'month': item.appprocesstime.substring(0, 7),\n                'days': [{\n                    'day': day_name,\n                    'speeds': [[item.average_speed]]\n                }]                \n            }]\n        })\n    } else {\n        //update existing road\n        let index_month = roads[index_road].months.findIndex(x => x.month === item.appprocesstime.substring(0, 7)); //find month in months\n        //if month does not exist\n        if (index_month === -1) {\n            roads[index_road].months.push({                \n                'month': item.appprocesstime.substring(0, 7),\n                'days': [{\n                    'day': day_name,\n                    'speeds': [[item.average_speed]]\n                }]\n            })            \n        } else {         \n            let index_day = roads[index_road].months[index_month].days.findIndex(x => x.day === day_name)\n            if (index_day === -1) {\n                roads[index_road].months[index_month].days.push({\n                    'day': day_name,\n                    'speeds': [[item.average_speed]]\n                })\n            } else {\n                roads[index_road].months[index_month].days[index_day].speeds.push([item.average_speed])\n            }\n        }\n    }        \n}\n\n\n\nmsg = {}\nmsg.dataset = roads\n// msg.data = monthly_clusters\n// [{\n//     'road_name': 'whatever',\n//     'months': [{\n//         'month': '2023-05',\n//         'days': [{\n//             'day': 'Monday',\n//             'speeds': [[2], [3]]\n//         }]\n//     }] \n// }]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 340,
        "wires": [
            [
                "cee2f7b1bbc03e41"
            ]
        ]
    },
    {
        "id": "4ce2c72f52286f80",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q1 2022",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2022-01-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2022-04-30",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "c5314ce5acc9490b",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q2 2022",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2022-05-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2022-08-31",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 120,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "b4dca3f229f878a3",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q3 2022",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2022-09-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2022-12-31",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "0c9b77d6be9bc512",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q1 2021",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2021-01-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2021-04-30",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "afbfa71a3edf9a4e",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q2 2021",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2021-05-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2021-08-31",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 80,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "e6711952ef966b19",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q3 2021",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2021-09-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2021-12-31",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 80,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "d107adaccec02b5c",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q1 2020",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2020-01-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2020-04-30",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "13991d33d212fdd6",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q2 2020",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2020-05-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2020-08-31",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 40,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "e7585a855331e0be",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q3 2020",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2020-09-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2020-12-31",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 40,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "36d586209e76af21",
        "type": "inject",
        "z": "019efafd3890369d",
        "name": "Q1 2023",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2023-01-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2023-04-30",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "52520011d05866bd"
            ]
        ]
    },
    {
        "id": "ad467894f55d15d7",
        "type": "inject",
        "z": "019efafd3890369d",
        "d": true,
        "name": "Q2 2023",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2023-05-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2023-08-31",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3a64f42b02c105f1",
        "type": "inject",
        "z": "019efafd3890369d",
        "d": true,
        "name": "Q3 2023",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2023-09-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2023-12-31",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "aa94f7e16b996e79",
        "type": "comment",
        "z": "019efafd3890369d",
        "name": "DB lines (per year) = 90 roads x 7 days x 12 months ~ 7500",
        "info": "",
        "x": 830,
        "y": 40,
        "wires": []
    },
    {
        "id": "1e6ab091d72cf623",
        "type": "inject",
        "z": "469d36c343ae88fa",
        "name": "from 2023-01-01 to 2023-04-30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "date_from",
                "v": "2023-01-01",
                "vt": "str"
            },
            {
                "p": "date_to",
                "v": "2023-04-30",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "a4eae0be3193e5d7"
            ]
        ]
    },
    {
        "id": "a4eae0be3193e5d7",
        "type": "link call",
        "z": "469d36c343ae88fa",
        "name": "",
        "links": [
            "fc0ac11ee099dff3"
        ],
        "linkType": "static",
        "timeout": "300",
        "x": 260,
        "y": 120,
        "wires": [
            [
                "f60ae7ab6aee55c0"
            ]
        ]
    },
    {
        "id": "f60ae7ab6aee55c0",
        "type": "function",
        "z": "469d36c343ae88fa",
        "name": "format dataset",
        "func": "const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n\nlet roads = []\n\nfor (let item of msg.payload) {\n    const birthday = new Date(item.appprocesstime.substring(0, 10))\n    const day_name = days[birthday.getDay()]\n\n    let index_road = roads.findIndex(x => x.road_name === item.road_name);\n\n    if (index_road === -1) {\n        //create new road\n        roads.push({\n            'road_name': item.road_name,\n            'days': [{             \n                'day': day_name,\n                'hours': [{\n                    'hour': item.appprocesstime.substring(11, 19),\n                    'speeds': [[item.average_speed]]\n                }]                \n            }]\n        })\n    } else {\n        let index_day = roads[index_road].days.findIndex(x => x.day === day_name)\n\n        if (index_day === -1) {\n            roads[index_road].days.push({\n                'day': day_name,\n                'hours': [{\n                    'hour': item.appprocesstime.substring(11, 19),\n                    'speeds': [[item.average_speed]]\n                }]\n            })\n        } else {\n            let index_hour = roads[index_road].days[index_day].hours.findIndex(x => x.hour === item.appprocesstime.substring(11, 19))\n\n            if (index_hour === -1) {\n                roads[index_road].days[index_day].hours.push({\n                    'hour': item.appprocesstime.substring(11, 19),\n                    'speeds': [[item.average_speed]]\n                })\n            } else {\n                roads[index_road].days[index_day].hours[index_hour].speeds.push([item.average_speed])\n            }           \n        }\n    }\n}\n\nmsg = {}\nmsg.dataset = roads\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 180,
        "wires": [
            [
                "0b49140f92b06cb5"
            ]
        ]
    },
    {
        "id": "0b49140f92b06cb5",
        "type": "function",
        "z": "469d36c343ae88fa",
        "name": "k-clustering",
        "func": "var clusterMaker = global.get('clusters')\n//number of clusters, defaults to undefined\nclusterMaker.k(2);\n\n//default to 1000\nclusterMaker.iterations(500);\n\nlet clusters = []\n\nfor (let road of msg.dataset) {\n    for (let day of road.days) {\n        for (let hour of day.hours){\n            clusterMaker.data(hour.speeds)\n            // let cluster = clusterMaker.clusters()\n            hour.clusters = clusterMaker.clusters()       \n        }       \n    }    \n}\n\n// msg = {}\n// msg.clusters = clusters\n// msg.payload = 'Operation Complete'\nreturn msg;\n\n// [{\n//     hour: '22:00:00',\n//     roads: [{\n//         road_name: 'κηφησία',\n//         speeds: [[2],[3]...]\n//     }]\n// }]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "7bb72f0154eba586"
            ]
        ]
    },
    {
        "id": "db5217e556bb47c1",
        "type": "comment",
        "z": "469d36c343ae88fa",
        "name": "clusters array size  = 90 roads x 7 days x 24 hours ~15000",
        "info": "",
        "x": 690,
        "y": 60,
        "wires": []
    },
    {
        "id": "7bb72f0154eba586",
        "type": "function",
        "z": "469d36c343ae88fa",
        "name": "build SQL Insert",
        "func": "let insert_query = \"INSERT INTO hourly_clusters(road, day, hour, centroid1, centroid2) VALUES \"\nfor (let road of msg.dataset) {\n    for (let day of road.days) {\n        for (let hour of day.hours) {\n            let max = hour.clusters[0].centroid[0]\n            let min = hour.clusters[1].centroid[0]\n            if (min > max) {\n                [max, min] = [min, max]\n            }\n            insert_query += `(\"${road.road_name}\", \"${day.day}\", \"${hour.hour}\", \"${max}\", \"${min}\"),`\n        }        \n    }    \n}\nmsg = {}\nmsg.topic = insert_query.slice(0, -1)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 300,
        "wires": [
            [
                "4afb4726da95e57b"
            ]
        ]
    },
    {
        "id": "4afb4726da95e57b",
        "type": "link out",
        "z": "469d36c343ae88fa",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "f8482dd0d3eb5861"
        ],
        "x": 435,
        "y": 300,
        "wires": []
    },
    {
        "id": "9710c3a746ea27f5",
        "type": "function",
        "z": "53617fb819fb8d69",
        "name": "built date params",
        "func": "let todayObj = new Date();\nlet yesterdayOnj = new Date(todayObj);\nyesterdayOnj.setDate(todayObj.getDate() - 1);\n\n\nlet yesterday_day = yesterdayOnj.getDate()\nlet today_day = todayObj.getDate()\n\nlet yesterday_month = yesterdayOnj.getMonth() + 1\nlet today_month = todayObj.getMonth() + 1\n\nlet yesterday_year = yesterdayOnj.getFullYear()\nlet today_year = todayObj.getFullYear()\n\n\nmsg.date_from = `${yesterday_year}-${yesterday_month}-${yesterday_day}`\n\nmsg.date_to = `${today_year}-${today_month}-${today_day}`\n// console.log(msg.date_from + msg.date_to)\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 160,
        "wires": [
            [
                "94838feaa4797e0c"
            ]
        ]
    },
    {
        "id": "94838feaa4797e0c",
        "type": "link call",
        "z": "53617fb819fb8d69",
        "name": "",
        "links": [
            "fc0ac11ee099dff3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 600,
        "y": 160,
        "wires": [
            [
                "20d5e062fa0e7d4a",
                "76d630bae28bda6d"
            ]
        ]
    },
    {
        "id": "7a484607652037be",
        "type": "link in",
        "z": "53617fb819fb8d69",
        "name": "last day's data",
        "links": [],
        "x": 45,
        "y": 80,
        "wires": [
            [
                "1b4131c2a8c9d70f"
            ]
        ]
    },
    {
        "id": "80c1db3f98970820",
        "type": "link out",
        "z": "53617fb819fb8d69",
        "name": "link out 10",
        "mode": "return",
        "links": [],
        "x": 925,
        "y": 240,
        "wires": []
    },
    {
        "id": "1b4131c2a8c9d70f",
        "type": "function",
        "z": "53617fb819fb8d69",
        "name": "validate saved data",
        "func": "//check if data exists and dates are yesterdays\n// let existing_data = undefined\nconst existing_data = global.get(\"yesterday_data\")\n// msg.existing_data = existing_data\n// return msg\n// if (existing_data) {\n// if (existing_data && existing_data.length > 0) {\n// if (existing_data && existing_data !== 'Bad query parameters') { //WHAT IS GOING ON?!??!!?\nif (existing_data) {  \n    let todayObj = new Date();\n    let yesterdayOnj = new Date(todayObj);\n    yesterdayOnj.setDate(todayObj.getDate() - 1);\n\n\n    let yesterday_day = yesterdayOnj.getDate()\n    // let today_day = todayObj.getDate()\n    if (yesterday_day.length === 1) {\n        yesterday_day = '0' + yesterday_day\n    }\n\n    let yesterday_month = yesterdayOnj.getMonth() + 1\n    if (yesterday_month.length === 1) {\n        yesterday_month = '0' + yesterday_month\n    }\n\n    let yesterday_year = yesterdayOnj.getFullYear()\n\n    let today = `${yesterday_year}-${yesterday_month}-${yesterday_day}`    \n    console.log(today)\n\n    if (existing_data[0].appprocesstime.substring(0, 10) === today) {\n        msg.data_exists = true\n    } else {\n        msg.data_exists = false\n    }    \n} else {\n    msg.data_exists = false\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "a0a393cd7672d554",
                "c6fe7a120f1db93a"
            ]
        ]
    },
    {
        "id": "a0a393cd7672d554",
        "type": "switch",
        "z": "53617fb819fb8d69",
        "name": "read saved or call api",
        "property": "data_exists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "9710c3a746ea27f5"
            ],
            [
                "ba5848d05ee7d4a7"
            ]
        ]
    },
    {
        "id": "ba5848d05ee7d4a7",
        "type": "function",
        "z": "53617fb819fb8d69",
        "name": "read saved flow var data",
        "func": "//read data from flow variable\nlet data = flow.get(\"yesterday_data\")\n\nif (data) {\n    msg.payload = data\n} else {\n    msg.payload = 'No yesterdays data exist'\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 240,
        "wires": [
            [
                "76d630bae28bda6d"
            ]
        ]
    },
    {
        "id": "76d630bae28bda6d",
        "type": "function",
        "z": "53617fb819fb8d69",
        "name": "format dataset",
        "func": "if (msg.payload.length === 0) {\n    msg.error = 'Empty data'\n    return msg\n}\n\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\nlet roads = []\n\n//format dataset\nfor (let item of msg.payload) {\n    const birthday = new Date(item.appprocesstime.substring(0, 10))\n    const day_name = days[birthday.getDay()]\n\n    let index_road = roads.findIndex(x => x.road_name === item.road_name);\n\n    if (index_road === -1) {\n        //create new road\n        roads.push({\n            'road_name': item.road_name,\n            'days': [{\n                'day': day_name,\n                'hours': [{\n                    'hour': item.appprocesstime.substring(11, 19),\n                    'speeds': [[item.average_speed]]\n                }]\n            }]\n        })\n    } else {\n        let index_day = roads[index_road].days.findIndex(x => x.day === day_name)\n\n        if (index_day === -1) {\n            roads[index_road].days.push({\n                'day': day_name,\n                'hours': [{\n                    'hour': item.appprocesstime.substring(11, 19),\n                    'speeds': [[item.average_speed]]\n                }]\n            })\n        } else {\n            let index_hour = roads[index_road].days[index_day].hours.findIndex(x => x.hour === item.appprocesstime.substring(11, 19))\n\n            if (index_hour === -1) {\n                roads[index_road].days[index_day].hours.push({\n                    'hour': item.appprocesstime.substring(11, 19),\n                    'speeds': [[item.average_speed]]\n                })\n            } else {\n                roads[index_road].days[index_day].hours[index_hour].speeds.push([item.average_speed])\n            }\n        }\n    }\n}\n\n//remove the extra day that the api returns at 00:00 hours\nfor (let item of roads) {  \n    if (item.days[0].hours.length === 1) {\n        item.days.splice(0, 1);\n    } else {\n        item.days.splice(1, 1);\n    }    \n}\n\n\n//average the speeds of every sensor for the same road\nfor (let item of roads) {  \n    for (let hour of item.days[0].hours) {\n        let total = 0\n        for (let speed of hour.speeds) {\n            total += speed[0]\n        }\n        hour.average = total / hour.speeds.length\n    }\n}\n\nmsg.yesterday_data = roads\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 240,
        "wires": [
            [
                "80c1db3f98970820"
            ]
        ]
    },
    {
        "id": "20d5e062fa0e7d4a",
        "type": "function",
        "z": "53617fb819fb8d69",
        "name": "save data to flow var",
        "func": "//if api data are valid save to flow variable\n// msg.payload.length !== 0\nif (msg.statusCode === 200 && msg.payload.length !== 0) {\n    global.set(\"yesterday_data\", msg.payload)\n}\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 160,
        "wires": []
    },
    {
        "id": "99fa6a9f2f698880",
        "type": "link in",
        "z": "53617fb819fb8d69",
        "name": "fallback",
        "links": [],
        "x": 45,
        "y": 340,
        "wires": [
            [
                "4501819c1806336a"
            ]
        ]
    },
    {
        "id": "4501819c1806336a",
        "type": "file in",
        "z": "53617fb819fb8d69",
        "name": "",
        "filename": "/home/mike/HUA/WebServices/HUA-DIT-WebServices/fallback.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 340,
        "y": 340,
        "wires": [
            [
                "9ea9cf9b9a240173"
            ]
        ]
    },
    {
        "id": "9ea9cf9b9a240173",
        "type": "json",
        "z": "53617fb819fb8d69",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 340,
        "wires": [
            [
                "f02f3e5307a8254a"
            ]
        ]
    },
    {
        "id": "e10c9de7e7130899",
        "type": "comment",
        "z": "53617fb819fb8d69",
        "name": "read fallback data file",
        "info": "",
        "x": 240,
        "y": 380,
        "wires": []
    },
    {
        "id": "082f0b7dddb74d14",
        "type": "function",
        "z": "53617fb819fb8d69",
        "d": true,
        "name": "Format dataset",
        "func": "if (msg.payload.length === 0) {\n    msg.error = 'Empty data'\n    return msg\n}\n\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\nlet roads = []\n\n//format dataset\nfor (let item of msg.payload) {\n    const birthday = new Date(item.appprocesstime.substring(0, 10))\n    const day_name = days[birthday.getDay()]\n\n    let index_road = roads.findIndex(x => x.road_name === item.road_name);\n\n    if (index_road === -1) {\n        //create new road\n        roads.push({\n            'road_name': item.road_name,\n            'days': [{\n                'day': day_name,\n                'hours': [{\n                    'hour': item.appprocesstime.substring(11, 19),\n                    'speeds': [[item.average_speed]]\n                }]\n            }]\n        })\n    } else {\n        let index_day = roads[index_road].days.findIndex(x => x.day === day_name)\n\n        if (index_day === -1) {\n            roads[index_road].days.push({\n                'day': day_name,\n                'hours': [{\n                    'hour': item.appprocesstime.substring(11, 19),\n                    'speeds': [[item.average_speed]]\n                }]\n            })\n        } else {\n            let index_hour = roads[index_road].days[index_day].hours.findIndex(x => x.hour === item.appprocesstime.substring(11, 19))\n\n            if (index_hour === -1) {\n                roads[index_road].days[index_day].hours.push({\n                    'hour': item.appprocesstime.substring(11, 19),\n                    'speeds': [[item.average_speed]]\n                })\n            } else {\n                roads[index_road].days[index_day].hours[index_hour].speeds.push([item.average_speed])\n            }\n        }\n    }\n}\nmsg.yesterday_data = roads\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "3981a75867b58fc9",
        "type": "function",
        "z": "53617fb819fb8d69",
        "d": true,
        "name": "Filter and average speeds",
        "func": "//remove the extra day that the api returns at 00:00 hours\nfor (let item of msg.yesterday_data) {\n    if (item.days[0].hours.length === 1) {\n        item.days.splice(0, 1);\n    } else {\n        item.days.splice(1, 1);\n    }\n}\n\n\n//average the speeds of every sensor for the same road\nfor (let item of msg.yesterday_data) {\n    for (let hour of item.days[0].hours) {\n        let total = 0\n        for (let speed of hour.speeds) {\n            total += speed[0]\n        }\n        hour.average = total / hour.speeds.length\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "5feb70fd6cf353fa",
        "type": "inject",
        "z": "53617fb819fb8d69",
        "name": "daily updates",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 80,
        "wires": [
            [
                "9710c3a746ea27f5"
            ]
        ]
    },
    {
        "id": "ff83d5fa30b0bfef",
        "type": "inject",
        "z": "53617fb819fb8d69",
        "name": "manual request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "1b4131c2a8c9d70f"
            ]
        ]
    },
    {
        "id": "c6fe7a120f1db93a",
        "type": "debug",
        "z": "53617fb819fb8d69",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "f02f3e5307a8254a",
        "type": "function",
        "z": "53617fb819fb8d69",
        "name": "set fallback dates",
        "func": "//in case yesterdays date has no data\nmsg.date_from = '2023-04-28'\nmsg.date_to = '2023-04-29'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 340,
        "wires": [
            [
                "76d630bae28bda6d"
            ]
        ]
    },
    {
        "id": "3a8adaa5cf1f1cc5",
        "type": "function",
        "z": "53617fb819fb8d69",
        "d": true,
        "name": "validate saved data",
        "func": "//check if data exists and dates are yesterdays\n// let existing_data = undefined\nconst existing_data = flow.get(\"yesterday_data\")\n// msg.existing_data = existing_data\n// return msg\n// if (existing_data) {\n// if (existing_data && existing_data.length > 0) {\n// if (existing_data && existing_data !== 'Bad query parameters') { //WHAT IS GOING ON?!??!!?\nif (existing_data) {\n    console.log('inside')\n    console.log('dsds' + existing_data)\n\n    let date = new Date();\n    date.setDate(date.getDate() - 1);\n\n\n    let yesterday = date.getDate().toString()\n    if (yesterday.length === 1) {\n        yesterday = '0' + yesterday\n    }\n    let month = date.getMonth() + 1\n    month = month.toString()\n\n    if (month.length === 1) {\n        month = '0' + month\n    }\n    let year = date.getFullYear()\n\n    let today = `${year}-${month}-${yesterday}`\n    \n    // console.log(today + ' vs '+ existing_data[0].appprocesstime.substring(0, 10))\n\n    if (existing_data[0].appprocesstime.substring(0, 10) === today) {\n        msg.data_exists = 1\n    } else {\n        msg.data_exists = 0\n    }    \n} else {\n    msg.data_exists = 0\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "2621d34476f2c82e",
        "type": "function",
        "z": "53617fb819fb8d69",
        "name": "function 1",
        "func": "let todayObj = new Date();\nlet yesterdayOnj = new Date(todayObj);\nyesterdayOnj.setDate(todayObj.getDate() - 1);\n\n\nlet yesterday_day = yesterdayOnj.getDate()\n// let today_day = todayObj.getDate()\n\nif (yesterday_day < 10) {\n    yesterday_day = '0' + yesterday_day\n}\n\nlet yesterday_month = yesterdayOnj.getMonth() + 1\nconsole.log(yesterday_month)\nif (yesterday_month < 10) {\n    yesterday_month = '0' + yesterday_month\n}\n\nlet yesterday_year = yesterdayOnj.getFullYear()\n\nlet today = `${yesterday_year}-${yesterday_month}-${yesterday_day}`\n// console.log(today)\nmsg.payload = today\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 660,
        "wires": [
            [
                "c160e3bc6061ab08"
            ]
        ]
    },
    {
        "id": "242e7a0869c4aa9a",
        "type": "inject",
        "z": "53617fb819fb8d69",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 720,
        "wires": [
            [
                "2621d34476f2c82e"
            ]
        ]
    },
    {
        "id": "c160e3bc6061ab08",
        "type": "debug",
        "z": "53617fb819fb8d69",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 660,
        "wires": []
    },
    {
        "id": "6f02af30701a186c",
        "type": "ui_dropdown",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Επιλέξτε δρόμο",
        "group": "578d025e00dafb5b",
        "order": 1,
        "width": 9,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 800,
        "y": 60,
        "wires": [
            [
                "40effdb6c6d6dcbc"
            ]
        ]
    },
    {
        "id": "90992ce88253f6ef",
        "type": "link call",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "links": [
            "4c0b0e95abe41adb"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 370,
        "y": 60,
        "wires": [
            [
                "c7be280a69d56b0a"
            ]
        ]
    },
    {
        "id": "c7be280a69d56b0a",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "built option List",
        "func": "msg.options = msg.payload\n\nlet options = []\nfor (let road of msg.payload) {\n    options.push(road.road)\n}\noptions.sort()\nmsg.options = options\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 60,
        "wires": [
            [
                "6f02af30701a186c",
                "ce598f2f6932a601"
            ]
        ]
    },
    {
        "id": "e8bd4058f302fd97",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "SQL auto query",
        "func": "msg.topic = 'SELECT DISTINCT road FROM monthly_clusters'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nlet msg = {}\nmsg.topic = 'SELECT DISTINCT road FROM monthly_clusters'\n// console.log('test')\nnode.send(msg);\nreturn msg\n",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 60,
        "wires": [
            [
                "90992ce88253f6ef"
            ]
        ]
    },
    {
        "id": "4957156a6f94ddd9",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "read data from DB",
        "func": "// const road = msg.payload\nlet limit = 6\nconst road = flow.get(\"road\")\nconst months = flow.get(\"months\")\nlimit = msg.payload-1\nmonths.sort()\n\nlet selected_dates = []\nfor (let i= limit; i > limit - 6; i--) {\n    selected_dates.push(`'${months[i]}'`)\n}\n\nmsg.topic = `SELECT * FROM monthly_clusters WHERE road = \"${road}\" AND month in (${selected_dates})`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 360,
        "wires": [
            [
                "be23879b3ae3ab6c"
            ]
        ]
    },
    {
        "id": "e36f970f36b4d8df",
        "type": "ui_chart",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "group": "578d025e00dafb5b",
        "order": 3,
        "width": 20,
        "height": 6,
        "label": "High centroids",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "120",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "be23879b3ae3ab6c",
        "type": "link call",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "links": [
            "4c0b0e95abe41adb"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 370,
        "y": 360,
        "wires": [
            [
                "6faafac9e3198f8f"
            ]
        ]
    },
    {
        "id": "b113fde78b0f9e8d",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "build chart data for high centroid",
        "func": "// let groups = msg.groups\n\nconst day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n// const day_names_el = ['Δευτέρα', 'Τρίτη', 'Τετάρτη', 'Πέμπτη', 'Παρασκευή', 'Σαββάτο', 'Κυριακή']\nlet months_idx = []\n\nfor (let month of msg.groups) {\n    months_idx.push(month[0].month)\n}\n\nlet data = []\n\nfor (let day of day_names) {\n    let values = Array(msg.groups.size).fill(0)\n    data.push(values)\n}\n\nfor (let month of msg.groups) {\n    let month_idx = months_idx.indexOf(month[0].month)\n    for (let day of month) {\n        let day_idx = day_names.indexOf(day.day)\n        data[day_idx][month_idx] = day.centroid1.toFixed(2);\n    }\n}\n// context.get(\"slider_limit\")\n\n\nmsg.payload = [{\n    'series': day_names,\n    'data': data,\n    'labels': months_idx\n}]\n\n// msg.groups = groups\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "e36f970f36b4d8df"
            ]
        ]
    },
    {
        "id": "727196b6ea05ef81",
        "type": "ui_chart",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "group": "578d025e00dafb5b",
        "order": 5,
        "width": 20,
        "height": 6,
        "label": "Low centroids",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "120",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "52993c78a5e79bd2",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "build chart data for low centroid",
        "func": "// let groups = msg.groups\n\nlet day_names = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nlet months_idx = []\n\nfor (let month of msg.groups) {\n    months_idx.push(month[0].month)\n}\n\nlet data = []\n\nfor (let day of day_names) {\n    let values = Array(msg.groups.size).fill(0)\n    data.push(values)\n}\n\nfor (let month of msg.groups) {\n    let month_idx = months_idx.indexOf(month[0].month)\n    for (let day of month) {\n        let day_idx = day_names.indexOf(day.day)\n        data[day_idx][month_idx] = day.centroid2.toFixed(2);\n    }\n}\n\n// let window = flow.get(\"window\");\n\nmsg.payload = [{\n    'series': day_names,\n    'data':data,\n    'labels': months_idx\n}]\n\n// msg.groups = groups\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 420,
        "wires": [
            [
                "727196b6ea05ef81"
            ]
        ]
    },
    {
        "id": "6faafac9e3198f8f",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "sort data",
        "func": "// let payload = msg.payload\n\nmsg.payload.sort((a, b) => {\n    if (a.month < b.month) {\n        return -1;\n    }\n    if (a.month > b.month) {\n        return 1;\n    }\n    return 0;\n});\n\nlet groups = []\n\nlet month = msg.payload[0].month\nlet months = []\nfor (let item of msg.payload) {\n    if (item.month === month) {\n        months.push(item)\n    } else {\n        groups.push(months)\n        month = item.month\n        months = []\n    }\n}\ngroups.push(months)\n\n\nfor (let group of groups) {\n    group.sort((a, b) => {\n        const days = {\n            'Monday': 1,\n            'Tuesday': 2,\n            'Wednesday': 3,\n            'Thursday': 4,\n            'Friday': 5,\n            'Saturday': 6,\n            'Sunday': 7\n        }\n        return days[a.day] - days[b.day];\n    });\n}\n\nmsg = {}\nmsg.groups = groups\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 360,
        "wires": [
            [
                "b113fde78b0f9e8d",
                "52993c78a5e79bd2"
            ]
        ]
    },
    {
        "id": "49770aad5ddbff47",
        "type": "inject",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "e8bd4058f302fd97"
            ]
        ]
    },
    {
        "id": "21f96850f3a19f0a",
        "type": "ui_slider",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "label": "Παράθυρο",
        "tooltip": "",
        "group": "578d025e00dafb5b",
        "order": 4,
        "width": 20,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "topic",
        "topicType": "msg",
        "min": "0",
        "max": "0",
        "step": 1,
        "className": "",
        "x": 790,
        "y": 200,
        "wires": [
            [
                "4957156a6f94ddd9"
            ]
        ]
    },
    {
        "id": "cf32b73628f33fde",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "set max value",
        "func": "let months = []\nfor (let month of msg.payload) {\n    months.push(month.month)\n}\nflow.set(\"months\", months)\n\nlet max = msg.payload.length\nif (max < 7) {\n    //Disable slider\n}\n\nmsg.ui_control = { \n    'min': 6, \n    'max': max\n}\n\nmsg.payload = msg.payload.length\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 200,
        "wires": [
            [
                "21f96850f3a19f0a",
                "c8cc289bda16f67f"
            ]
        ]
    },
    {
        "id": "40effdb6c6d6dcbc",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "build SQL query",
        "func": "const road = msg.payload\n\nflow.set(\"road\", road)\n\nmsg.topic = `SELECT DISTINCT month FROM monthly_clusters WHERE road = \"${road}\"`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 200,
        "wires": [
            [
                "ba063cc96d4266ed"
            ]
        ]
    },
    {
        "id": "ba063cc96d4266ed",
        "type": "link call",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "links": [
            "4c0b0e95abe41adb"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "cf32b73628f33fde"
            ]
        ]
    },
    {
        "id": "c8cc289bda16f67f",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "initial chart setting",
        "func": "// let limit = 6\nconst road = flow.get(\"road\")\nconst months = flow.get(\"months\")\n// limit = msg.payload - 1\nmonths.sort()\n\nlet selected_dates = []\nfor (let i = months.length; i > months.length - 7; i--) {\n    selected_dates.push(`'${months[i]}'`)\n}\n\nmsg.topic = `SELECT * FROM monthly_clusters WHERE road = \"${road}\" AND month in (${selected_dates})`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 280,
        "wires": [
            [
                "be23879b3ae3ab6c"
            ]
        ]
    },
    {
        "id": "5218a7d91a66dc45",
        "type": "ui_dropdown",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "ΟΔΟΣ",
        "group": "6207fff339b851ea",
        "order": 2,
        "width": 10,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 120,
        "y": 1060,
        "wires": [
            [
                "6b3121bf7cdab1f2",
                "f101341dc00b2c31"
            ]
        ]
    },
    {
        "id": "92edc011fffd5476",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "build SQL query",
        "func": "// const road = msg.payload\nconst road = flow.get(\"selected_road\")\nmsg.topic = `SELECT * FROM hourly_clusters WHERE road = \"${road}\"`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 1220,
        "wires": [
            [
                "f0764441520d46f0"
            ]
        ]
    },
    {
        "id": "f0764441520d46f0",
        "type": "link call",
        "z": "e0bd9e50950cbdbf",
        "name": "DB Interface",
        "links": [
            "4c0b0e95abe41adb"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "f44edb29c2825f75"
            ]
        ]
    },
    {
        "id": "731d3ecc508dd7eb",
        "type": "ui_chart",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "group": "6207fff339b851ea",
        "order": 4,
        "width": 26,
        "height": 6,
        "label": "Mέση ταχύτητα οχημάτων ανά ώρα",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#3ca503",
            "#ee3a3a",
            "#8e9da9",
            "#ad00a8",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 720,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "3d38f7da6ab0d8a2",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "build chart data",
        "func": "//calculate midpoint\nfor (let item of msg.selected_day_data) {\n    item.midpoint = item.centroid1 + ((item.centroid2 - item.centroid1) / 2)\n}\n\n//create 2d arrays\nlet data = []\nfor (let i=0; i < 4; i++) {\n    data.push(new Array(24).fill(0))\n}\n\nlet labels = []\nfor (let item of msg.selected_day_data) {\n    labels.push(item.hour)\n}\n\n//create yesterdays average speed data points\nlet yesterday = new Array(24).fill(0)\n\n//put average speeds to correct index\nif (msg.yesterday_data) {\n    for (let hour of msg.yesterday_data) {\n        yesterday[labels.indexOf(hour.hour)] = hour.average\n    }\n}\n\n//create chart data points\nfor (let i=0; i < 24; i++) {\n    data[0][i] = msg.selected_day_data[i].centroid1\n    data[1][i] = msg.selected_day_data[i].centroid2\n    data[2][i] = msg.selected_day_data[i].midpoint\n    data[3][i] = yesterday[i]\n}\n\nmsg.payload = [{\n    \"series\": [\"High\", \"Low\", \"Midpoint\", \"Data for \" + msg.date_from],\n    \"data\": data,\n    \"labels\": labels\n}]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1300,
        "wires": [
            [
                "731d3ecc508dd7eb"
            ]
        ]
    },
    {
        "id": "6b3121bf7cdab1f2",
        "type": "link call",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "links": [
            "7a484607652037be"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 140,
        "y": 1140,
        "wires": [
            [
                "689deff0571ee86a"
            ]
        ]
    },
    {
        "id": "f101341dc00b2c31",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "set selected road context var",
        "func": "flow.set(\"selected_road\", msg.payload)\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1060,
        "wires": []
    },
    {
        "id": "689deff0571ee86a",
        "type": "switch",
        "z": "e0bd9e50950cbdbf",
        "name": "if API returns last day's data",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 1140,
        "wires": [
            [
                "92edc011fffd5476"
            ],
            [
                "9288b346e83a23b9"
            ]
        ]
    },
    {
        "id": "9288b346e83a23b9",
        "type": "link call",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "links": [
            "99fa6a9f2f698880"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 800,
        "y": 1140,
        "wires": [
            [
                "92edc011fffd5476"
            ]
        ]
    },
    {
        "id": "0b5c56d0be8269c5",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "filter for selected day from DB data",
        "func": "const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\nconst date = new Date()\ndate.setDate(date.getDate() - 1);\nconst day = days[date.getDay()]\n\n\nlet selected_day = []\n//filter yesterday's day from DB data\nfor (let item of msg.payload) {\n    if (item.day === day) {\n        selected_day.push(item)\n    }\n}\nmsg.selected_day_data = selected_day\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1300,
        "wires": [
            [
                "15edcb5a0b4d67bc",
                "3f13be38c091eafb"
            ]
        ]
    },
    {
        "id": "f44edb29c2825f75",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "filter for selected road from API data",
        "func": "//isolate selected road from dataset\nconst selected_road = flow.get(\"selected_road\")\n\nlet road_data = []\nif (msg.yesterday_data) {\n    for (let road of msg.yesterday_data) {\n        if (road.road_name === selected_road) {\n            road_data = road.days[0].hours\n            break   \n        }\n    }     \n}\n\nif (road_data.length === 0) {    \n    for (let hour of msg.yesterday_data[0].days[0].hours) {\n        road_data.push({\n            'hour': hour.hour,\n            'average': 0\n        })\n    }   \n}\nmsg.yesterday_data = road_data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1220,
        "wires": [
            [
                "0b5c56d0be8269c5"
            ]
        ]
    },
    {
        "id": "15edcb5a0b4d67bc",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "d": true,
        "name": "Convert to GMT+2",
        "func": "//convert to GMT+2 for DB data and yesterday's data\n\nfor (let item of msg.selected_day_data) {    \n    let hour = Number(item.hour.substring(0, 2))\n    let remaining = item.hour.substring(2, 8)\n    hour = (hour + 2) % 24\n    let hour_str = `${hour}`\n    if (hour_str.length === 1) {\n        hour_str = '0' + hour_str\n    }\n    item.hour = hour_str + `${remaining}`\n}\n\n\nif (msg.yesterday_data) { \n    for (let item of msg.yesterday_data) {\n        let hour = Number(item.hour.substring(0, 2))\n        let remaining = item.hour.substring(2, 8)\n        hour = (hour + 2) % 24\n        let hour_str = `${hour}`\n        if (hour_str.length === 1) {\n            hour_str = '0' + hour_str\n        }\n        item.hour = hour_str + `${remaining}`\n    }\n}\n\nmsg.selected_day_data.sort((a, b) => {\n    if (a.hour < b.hour) {\n        return -1;\n    }\n    if (a.hour > b.hour) {\n        return 1;\n    }\n    return 0;\n});\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1380,
        "wires": [
            [
                "3f13be38c091eafb"
            ]
        ]
    },
    {
        "id": "3f13be38c091eafb",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "sort data",
        "func": "msg.selected_day_data.sort((a, b) => {\n    if (a.hour < b.hour) {\n        return -1;\n    }\n    if (a.hour > b.hour) {\n        return 1;\n    }\n    return 0;\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1300,
        "wires": [
            [
                "3d38f7da6ab0d8a2"
            ]
        ]
    },
    {
        "id": "2d91fb186e0d914e",
        "type": "link call",
        "z": "e0bd9e50950cbdbf",
        "name": "",
        "links": [
            "4c0b0e95abe41adb"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 330,
        "y": 980,
        "wires": [
            [
                "0c78b869a0108ee6"
            ]
        ]
    },
    {
        "id": "0c78b869a0108ee6",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "built option List",
        "func": "msg.options = msg.payload\n\nlet options = []\nfor (let road of msg.payload) {\n    options.push(road.road)\n}\noptions.sort()\nmsg.options = options\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 980,
        "wires": [
            [
                "5218a7d91a66dc45"
            ]
        ]
    },
    {
        "id": "ce598f2f6932a601",
        "type": "function",
        "z": "e0bd9e50950cbdbf",
        "name": "SQL query",
        "func": "msg.topic = 'SELECT DISTINCT road FROM hourly_clusters'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n// let msg = {}\n// msg.topic = 'SELECT DISTINCT road FROM monthly_clusters'\n// // console.log('test')\n// node.send(msg);\n// return msg\n",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 980,
        "wires": [
            [
                "2d91fb186e0d914e"
            ]
        ]
    },
    {
        "id": "5cdb945e425107ad",
        "type": "amqp-out",
        "z": "70cdc46223053fea",
        "name": "",
        "broker": "6843372537ab3896",
        "exchangeName": "gr.traffic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "hourly_traffic_report",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 400,
        "y": 240,
        "wires": []
    },
    {
        "id": "d2f25462ba46c893",
        "type": "inject",
        "z": "70cdc46223053fea",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "0f95abfdd82a53f0"
            ]
        ]
    },
    {
        "id": "2223e61103c92cae",
        "type": "amqp-in",
        "z": "70cdc46223053fea",
        "name": "",
        "broker": "82cfb6e6ec87f54c",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "gr.traffic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "hourly_traffic_report",
        "exchangeDurable": true,
        "queueName": "gr.traffic",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 180,
        "y": 460,
        "wires": [
            [
                "e9a8a57890ca3586"
            ]
        ]
    },
    {
        "id": "0f95abfdd82a53f0",
        "type": "link call",
        "z": "70cdc46223053fea",
        "name": "",
        "links": [
            "7a484607652037be"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 320,
        "y": 80,
        "wires": [
            [
                "8ec6f897dbadee32"
            ]
        ]
    },
    {
        "id": "8ec6f897dbadee32",
        "type": "switch",
        "z": "70cdc46223053fea",
        "name": "if API returns last day's data",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 80,
        "wires": [
            [
                "735edf17ff961011"
            ],
            [
                "b2559485665888fe"
            ]
        ]
    },
    {
        "id": "b2559485665888fe",
        "type": "link call",
        "z": "70cdc46223053fea",
        "name": "",
        "links": [
            "99fa6a9f2f698880"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 840,
        "y": 80,
        "wires": [
            [
                "735edf17ff961011"
            ]
        ]
    },
    {
        "id": "735edf17ff961011",
        "type": "function",
        "z": "70cdc46223053fea",
        "name": "filter for current hour",
        "func": "const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\nconst todayObj = new Date();\nlet yesterdayOnj = new Date(todayObj);\nyesterdayOnj.setDate(todayObj.getDate() - 1);\nconst day = days[yesterdayOnj.getDay()]\nconst hour = yesterdayOnj.getHours()\nconst hour_str = hour + ':00:00'\n\nlet roads = []\nfor (let item of msg.yesterday_data) {\n    for (let hour of item.days[0].hours) {\n        if (hour.hour === hour_str) {\n            roads.push({\n                \"road\": item.road_name,\n                \"speed\": hour.average,                \n            })\n        }               \n    }\n}\n\nmsg.yesterday_data = roads\nmsg.params = {\n    \"day\": day,\n    \"hour\": hour_str\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 160,
        "wires": [
            [
                "a0485458b1d65b58",
                "e3e9c08d5728ee61"
            ]
        ]
    },
    {
        "id": "48498d46b1b6918e",
        "type": "function",
        "z": "70cdc46223053fea",
        "name": "check for high traffic",
        "func": "\nlet slow_roads = []\nfor (let road of msg.payload) {\n    for (let road2 of msg.yesterday_data) {\n        if (road.road === road2.road) {\n            if (road2.speed !== 0 && road2.speed <= road.centroid2) {\n                console.log(road2.speed + \" \" + road.centroid2 + \" \" + road.road)\n                slow_roads.push(road.road)\n            }\n        }\n    }\n}\nconst params = msg.params\nmsg = {}\nmsg.payload = slow_roads\nmsg.day = params.day\nmsg.hour = params.hour\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 160,
        "wires": [
            [
                "fd06c100636470b4"
            ]
        ]
    },
    {
        "id": "fd06c100636470b4",
        "type": "function",
        "z": "70cdc46223053fea",
        "name": "format message",
        "func": "let msg_string = \"Με βάση τα χθεσινά δεδομένα παρατηρήθηκε υψηλή κίνηση στις οδούς \"\nfor (let road of msg.payload) {\n    msg_string += road\n    msg_string += \", \"\n}\nmsg_string += \"για την ώρα \" + msg.hour\n\nmsg.payload = msg_string\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 240,
        "wires": [
            [
                "5cdb945e425107ad"
            ]
        ]
    },
    {
        "id": "a0485458b1d65b58",
        "type": "function",
        "z": "70cdc46223053fea",
        "name": "built SQL query",
        "func": "msg.topic = `SELECT * FROM hourly_clusters WHERE day = \"${msg.params.day}\" AND hour = \"${msg.params.hour}\"`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            [
                "3103df930abd12b3"
            ]
        ]
    },
    {
        "id": "3103df930abd12b3",
        "type": "link call",
        "z": "70cdc46223053fea",
        "name": "",
        "links": [
            "4c0b0e95abe41adb"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 610,
        "y": 160,
        "wires": [
            [
                "48498d46b1b6918e"
            ]
        ]
    },
    {
        "id": "0dabfdb1fc2e9948",
        "type": "comment",
        "z": "70cdc46223053fea",
        "name": "make inject work for every hour",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "e9a8a57890ca3586",
        "type": "debug",
        "z": "70cdc46223053fea",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 460,
        "wires": []
    },
    {
        "id": "e3e9c08d5728ee61",
        "type": "debug",
        "z": "70cdc46223053fea",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 380,
        "wires": []
    }
]